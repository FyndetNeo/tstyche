// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toEqual: stderr 1`] = `
"Error: Type '{ first: string; last: string; }' is not identical to type 'Names'.

  32 |     expect<Names>().type.toEqual<{ first: string; last?: string }>();
  33 | 
> 34 |     expect<Names>().type.toEqual<{ first: string; last: string }>();
     |                          ^
  35 |   });
  36 | 
  37 |   test("does NOT equal expected type", () => {

       at ./__typetests__/toEqual.test.ts:34:26 ❭ received type ❭ equals expected type

Error: Type '{ first: string; last?: string | undefined; }' is identical to type 'Names'.

  38 |     expect<Names>().type.not.toEqual<{ first: string; last: string }>();
  39 | 
> 40 |     expect<Names>().type.not.toEqual<{ first: string; last?: string }>();
     |                              ^
  41 |   });
  42 | 
  43 |   test("equals expected value", () => {

       at ./__typetests__/toEqual.test.ts:40:30 ❭ received type ❭ does NOT equal expected type

Error: Type 'Names' is not identical to type '{ first: string; last: string; }'.

  45 |     expect<{ first: string; last?: string }>().type.toEqual(getNames());
  46 | 
> 47 |     expect<{ first: string; last: string }>().type.toEqual(getNames());
     |                                                    ^
  48 |   });
  49 | 
  50 |   test("does NOT equal expected value", () => {

       at ./__typetests__/toEqual.test.ts:47:52 ❭ received type ❭ equals expected value

Error: Type 'Names' is identical to type '{ first: string; last?: string | undefined; }'.

  51 |     expect<{ first: string; last: string }>().type.not.toEqual(getNames());
  52 | 
> 53 |     expect<{ first: string; last?: string }>().type.not.toEqual(getNames());
     |                                                         ^
  54 |   });
  55 | });
  56 | 

       at ./__typetests__/toEqual.test.ts:53:57 ❭ received type ❭ does NOT equal expected value

Error: Type '{ first: string; last: string; }' is not identical to type 'Names'.

  60 |     expect(getNames()).type.toEqual<Names>();
  61 | 
> 62 |     expect(getNames()).type.toEqual<{ first: string; last: string }>();
     |                             ^
  63 |   });
  64 | 
  65 |   test("does NOT equal expected type", () => {

       at ./__typetests__/toEqual.test.ts:62:29 ❭ received value ❭ equals expected type

Error: Type '{ first: string; last?: string | undefined; }' is identical to type 'Names'.

  66 |     expect(getNames()).type.not.toEqual<{ first: string; last: string }>();
  67 | 
> 68 |     expect(getNames()).type.not.toEqual<{ first: string; last?: string }>();
     |                                 ^
  69 |   });
  70 | 
  71 |   test("equals expected value", () => {

       at ./__typetests__/toEqual.test.ts:68:33 ❭ received value ❭ does NOT equal expected type

Error: Type 'Size' is not identical to type '{ height: number; }'.

  72 |     expect({ height: 14, width: 25 }).type.toEqual(getSize());
  73 | 
> 74 |     expect({ height: 14 }).type.toEqual(getSize());
     |                                 ^
  75 |   });
  76 | 
  77 |   test("does NOT equal expected value", () => {

       at ./__typetests__/toEqual.test.ts:74:33 ❭ received value ❭ equals expected value

Error: Type 'Size' is identical to type '{ height: number; width: number; }'.

  78 |     expect({ height: 14 }).type.not.toEqual(getSize());
  79 | 
> 80 |     expect({ height: 14, width: 25 }).type.not.toEqual(getSize());
     |                                                ^
  81 |   });
  82 | });
  83 | 

       at ./__typetests__/toEqual.test.ts:80:48 ❭ received value ❭ does NOT equal expected value

"
`;

exports[`toEqual: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/toEqual.test.ts
  + edge cases
  received type
    × equals expected type
    × does NOT equal expected type
    × equals expected value
    × does NOT equal expected value
  received value
    × equals expected type
    × does NOT equal expected type
    × equals expected value
    × does NOT equal expected value

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      8 failed, 1 passed, 9 total
Assertions: 8 failed, 14 passed, 22 total
Duration:   <<timestamp>>

Ran all test files.
"
`;
